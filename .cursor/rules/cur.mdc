---
description: 
globs: 
---

# Your rule content

CursorRules：形态选股系统开发指南
1. 项目概述
这是一个基于 Python 的形态选股系统，使用 AKShare 获取 A 股数据，采用 DTW 和 K-Shape 算法进行形态匹配，通过 Plotly Dash 构建交互式用户界面。系统在单台 Windows 11 计算机上运行，无需服务器部署。

2. 代码组织规则
2.1 目录结构

    
    

  /stock_pattern_system
  /app
    /__init__.py
    /api              # 后端 API 模块
      /__init__.py
      /stocks.py      # 股票数据 API
      /patterns.py    # 形态模板 API
      /matching.py    # 形态匹配 API
    /models           # 数据模型
      /__init__.py
      /database.py    # 数据库连接管理
    /algorithm        # 算法模块
      /__init__.py
      /dtw_matcher.py       # DTW 算法实现
      /kshape_clusterer.py  # K-Shape 算法实现
      /pattern_matcher.py   # 形态匹配主逻辑
      /visualization.py     # 算法可视化
    /ui               # 前端界面
      /__init__.py
      /layouts        # 页面布局
      /components     # UI 组件
      /callbacks      # 交互回调
    /utils            # 工具函数
      /__init__.py
      /api_client.py  # API 客户端
      /config.py      # 配置管理
  /data               # 数据存储
    /db               # SQLite 数据库文件
    /cache            # 缓存文件
  /scripts            # 脚本和工具
    /setup.py         # 安装脚本
    /update_data.py   # 数据更新脚本
  /tests              # 测试代码
    /unit             # 单元测试
    /integration      # 集成测试
  /docs               # 文档
  config.py           # 全局配置
  run.py              # 应用入口
  requirements.txt    # 依赖列表
2.2 命名约定
文件名：全小写，下划线分隔（如 dtw_matcher.py）
类名：驼峰命名（如 DTWMatcher）
函数/方法：小写，下划线分隔（如 calculate_similarity）
变量：小写，下划线分隔（如 stock_data）
常量：全大写，下划线分隔（如 MAX_THREADS）
私有成员：下划线前缀（如 _internal_method）
3. 编码规范
3.1 通用规则
遵循 PEP 8 Python 编码风格指南
行长度限制为 100 字符
使用 4 空格缩进（不使用 Tab）
模块顶部导入顺序：标准库 > 第三方库 > 本地模块
每个函数/方法添加文档字符串，说明功能、参数和返回值
3.2 注释规范
每个模块、类和函数必须有文档字符串（docstring）
复杂算法需添加详细注释，解释算法原理和参数含义
使用 NumPy/SciPy 风格的文档字符串格式
关键代码块添加行内注释说明目的和逻辑
3.3 错误处理
使用明确的异常类型（避免捕获所有异常）
创建自定义异常类处理特定业务逻辑错误
记录详细错误信息，包括上下文和可能的解决方案
API 返回标准化错误响应格式
4. 技术实现指南
4.1 数据获取与存储
使用 AKShare 获取 A 股历史数据，重点关注 ak.stock_zh_a_hist 函数
数据获取需实现重试和错误处理机制
使用 SQLite 作为数据存储，创建适当的索引优化查询性能
计算并存储 MA5、MA10、MA20 等技术指标，避免重复计算
实现增量更新机制，仅获取新数据
4.2 算法实现
DTW 算法使用 dtaidistance 库实现，需处理序列长度不一致问题
K-Shape 算法使用 tslearn 库实现，作为预处理减少计算量
时间序列数据需进行归一化处理（0-1 范围）
相似度计算公式：similarity = 1 / (1 + DTW_distance)
使用 multiprocessing 实现并行计算，但需限制进程数避免内存溢出
实现计算结果缓存，避免重复计算
4.3 前端实现
使用 Plotly Dash 构建交互式界面，保持代码模块化
K 线图组件使用 Plotly 的 Candlestick 图表，添加均线显示
区域选择工具用于标记和选择标准形态
实现 clientside callbacks 减轻服务器负担
优化大数据渲染性能，实现数据分页和懒加载
设计响应式布局，适应不同屏幕尺寸
4.4 API 设计
实现 RESTful API 设计原则
统一响应格式：{"status": "success|error", "data": {...}, "message": "..."}
使用参数化查询防止 SQL 注入
实现请求验证和错误处理
长时间计算任务设计异步处理机制
5. 性能优化指南
5.1 数据库优化
为频繁查询的字段创建索引（如 stock_code, trade_date）
使用事务批量处理数据插入和更新
优化查询语句，避免全表扫描
实现查询结果缓存，减少重复查询
定期进行数据库维护（VACUUM）
5.2 算法优化
实现多级匹配策略：先 K-Shape 聚类，后 DTW 精确计算
添加提前终止条件，当距离超过阈值时停止计算
优化内存使用，避免大量对象创建和复制
使用 NumPy 向量化操作提高计算效率
实现并行计算，但根据系统资源动态调整并行度
5.3 前端优化
实现数据分页和虚拟滚动处理大量结果
缓存 API 响应数据，减少重复请求
优化回调依赖链，避免不必要的更新
使用 clientside callbacks 处理简单交互
延迟加载非关键组件和数据
6. 测试要求
6.1 单元测试
使用 pytest 框架编写测试
每个核心函数和方法必须有对应测试
测试覆盖正常流程和边缘情况
使用 mock 对象模拟外部依赖
算法模块需测试准确性和性能
6.2 集成测试
测试模块间接口和数据流
验证完整功能流程（从数据获取到结果展示）
测试错误处理和恢复机制
验证 UI 交互和数据显示
性能和负载测试
7. 文档要求
7.1 代码文档
每个模块、类和函数必须有文档字符串
复杂算法需添加详细说明
关键参数和返回值需有清晰描述
示例代码展示使用方法
7.2 用户文档
安装和配置指南
功能使用教程
常见问题解答
故障排除指南
包含截图和示例说明
8. 实现优先级
数据获取与存储模块（基础设施）
算法核心功能（DTW 和 K-Shape 实现）
后端 API 接口
前端基础界面和 K 线图组件
形态选择和匹配功能
结果展示和可视化
性能优化和测试
文档和用户指南
9. Windows 11 特定规则
使用相对路径而非绝对路径，确保可移植性
使用 os.path.join 构建文件路径，避免路径分隔符问题
考虑文件名长度限制和特殊字符处理
实现自动创建必要文件夹和权限检查
提供 .bat 脚本简化启动和管理
注意资源释放和进程清理，避免资源泄漏
10. 依赖管理
明确指定依赖版本号，避免兼容性问题
最小化依赖数量，减少冲突可能
核心依赖：
Flask==2.0.1
dash==2.0.0
plotly==5.3.1
pandas==1.3.3
numpy==1.21.2
akshare==1.0.0 (或最新稳定版)
dtaidistance==2.3.10
tslearn==0.5.2
pytest==6.2.5
提供 requirements.txt 和虚拟环境设置指南
按照以上规则开发，将确保形态选股系统代码质量高、结构清晰、性能优异，同时保持可维护性和可扩展性。实现过程中如遇到特殊情况，可灵活调整，但应保持文档更新，确保开发一致性。
